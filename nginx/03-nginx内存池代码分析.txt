src\core\ngx_palloc.h

1、定义一个结构体 ngx_pool_data_t，用于表示内存池的数据结构
typedef struct { //  
    u_char               *last; //  指向内存池中最后一个已使用的字节的指针
    u_char               *end; //  指向内存池末尾的指针，表示内存池的结束位置
    ngx_pool_t           *next; //  指向下一个内存池块的指针，用于链表结构
    ngx_uint_t            failed; //  表示内存分配失败的次数，用于错误处理
} ngx_pool_data_t; //  定义一个结构体类型ngx_pool_data_t，用于描述内存池的数据结构

ngx_pool_data_t 是 Nginx 内存池（ngx_pool_t）中的一个核心数据结构，用于管理内存池的分配和链接信息。

成员变量解释：
u_char *last:

指向当前内存池块中已分配内存的末尾位置。
表示下一个可分配内存的起始地址。
u_char *end:

指向当前内存池块的结束位置。
表示当前内存池块的最大可用内存范围。
ngx_pool_t *next:

指向下一个内存池块的指针。
如果当前内存池块的空间不足，Nginx 会创建一个新的内存池块，并通过该指针将其链接到链表中。
ngx_uint_t failed:

记录当前内存池块连续分配失败的次数。
当某个内存池块多次分配失败时，Nginx 会将后续的分配请求转向其他内存池块，以提高性能。


2、创建内存池函数
/*************************************
 * 
内存池的工作原理
内存分配：当需要分配内存时，Nginx 首先检查当前内存池块是否有足够的可用空间。如果有，则从当前内存池块分配；如果没有，则创建一个新的内存池块。
大块内存：如果请求的内存大小超过了 max，Nginx 会从操作系统直接分配一个大块内存，并将其添加到 large 链表中。
内存释放：Nginx 内存池通常在特定的事件（如请求结束）时一次性释放整个内存池，包括所有小块和大块内存。
 * 
 * *****************************************/
ngx_pool_t * ngx_create_pool(size_t size, ngx_log_t *log)
{
    ngx_pool_t  *p;

    p = ngx_memalign(NGX_POOL_ALIGNMENT, size, log);
    if (p == NULL) {
        return NULL;
    }

    p->d.last = (u_char *) p + sizeof(ngx_pool_t);
    p->d.end = (u_char *) p + size;
    p->d.next = NULL;
    p->d.failed = 0;

    size = size - sizeof(ngx_pool_t);
    p->max = (size < NGX_MAX_ALLOC_FROM_POOL) ? size : NGX_MAX_ALLOC_FROM_POOL;

    p->current = p;
    p->chain = NULL;
    p->large = NULL;
    p->cleanup = NULL;
    p->log = log;

    return p;
}


3、销毁内存池函数
清理回调函数：遍历并调用所有注册的清理回调函数。
释放大块内存：遍历并释放所有大块内存（通过 large 链表管理）。
释放内存池块：遍历并释放所有内存池块（通过链表结构管理）。
void ngx_destroy_pool(ngx_pool_t *pool)
{
    ngx_pool_t          *p, *n;
    ngx_pool_large_t    *l;
    ngx_pool_cleanup_t  *c;

    for (c = pool->cleanup; c; c = c->next) {
        if (c->handler) {
            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool->log, 0,
                           "run cleanup: %p", c);
            c->handler(c->data);
        }
    }

#if (NGX_DEBUG)

    /*
     * we could allocate the pool->log from this pool
     * so we cannot use this log while free()ing the pool
     */

    for (l = pool->large; l; l = l->next) {
        ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool->log, 0, "free: %p", l->alloc);
    }

    for (p = pool, n = pool->d.next; /* void */; p = n, n = n->d.next) {
        ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, pool->log, 0,
                       "free: %p, unused: %uz", p, p->d.end - p->d.last);

        if (n == NULL) {
            break;
        }
    }

#endif

    for (l = pool->large; l; l = l->next) {
        if (l->alloc) {
            ngx_free(l->alloc);
        }
    }

    for (p = pool, n = pool->d.next; /* void */; p = n, n = n->d.next) {
        ngx_free(p);

        if (n == NULL) {
            break;
        }
    }
}

4、ngx_pnalign 和 ngx_palloc 的主要区别在于内存对齐方式的处理：

ngx_palloc:

在分配小块内存时（size <= pool->max），调用 ngx_palloc_small(pool, size, 1)。
第二个参数为 1，表示需要进行内存对齐（通过 ngx_align_ptr 函数）。
ngx_pnalloc:

在分配小块内存时（size <= pool->max），调用 ngx_palloc_small(pool, size, 0)。
第二个参数为 0，表示不需要进行内存对齐。
总结
ngx_palloc: 分配的内存会进行对齐处理。
ngx_pnalloc: 分配的内存不会进行对齐处理。





4、#define ngx_align_ptr(p, a)
(u_char *) (((uintptr_t) (p) + ((uintptr_t) a - 1)) & ~((uintptr_t) a - 1))
功能分解：
(uintptr_t) (p):

将指针 p 转换为无符号整数类型 uintptr_t，以便进行算术运算。
+ ((uintptr_t) a - 1):

将指针地址加上 (a - 1)，确保后续按位与操作能够正确对齐到 a 的倍数。
& ~((uintptr_t) a - 1):

计算掩码 ~((uintptr_t) a - 1)，清除低几位，使结果地址对齐到 a 的倍数。
例如，如果 a = 8，则 ~(8 - 1) = ~(7) = 0xFFFFFFF8（二进制中保留高几位，清零低三位）。
(u_char *):

将计算后的对齐地址重新转换为 u_char * 类型，返回对齐后的指针。


示例：
假设 p = 0x1234567A，a = 8：

(uintptr_t) p = 0x1234567A
+ (a - 1) = 0x1234567A + 7 = 0x12345681
& ~((uintptr_t) a - 1) = 0x12345681 & 0xFFFFFFF8 = 0x12345680
最终结果：ngx_align_ptr(p, 8) 返回 0x12345680，即按 8 字节对齐后的地址。

注意事项：
对齐值 a 必须是 2 的幂（如 2、4、8、16 等），否则可能导致错误的结果。
该宏在内存分配和管理中常用，确保数据结构或缓冲区按照特定边界对齐，以提高性能或满足硬件要求。


5、posix_memalign
内存块的对齐方式是指内存块起始地址相对于某个基准地址的偏移量。对齐方式通常以字节为单位来表示，例如，4字节对齐、8字节对齐等。对齐的目的是为了提高内存访问的效率，因为某些硬件架构在访问内存时，对特定对齐方式的内存地址有更好的性能表现。

对齐方式示例
4字节对齐: 起始地址必须是4的倍数（例如，0x0000, 0x0004, 0x0008等）。
8字节对齐: 起始地址必须是8的倍数（例如，0x0000, 0x0008, 0x0010等）。
posix_memalign 函数
posix_memalign 函数允许你指定分配内存块的对齐方式。其函数原型如下：
int posix_memalign(void **memptr, size_t alignment, size_t size);
参数解释：
memptr: 指向指针的指针，用于存储分配的内存块的地址。
alignment: 指定对齐方式，必须是2的幂。
size: 指定要分配的内存块的大小。
返回值：
成功时返回0，并将分配的内存块的地址存储在 memptr 指向的位置。
失败时返回一个错误码，并将 memptr 设置为 NULL。
